/**
**********************************************************************
* @file		Sample0-Global.h
* @brief	浅くC言語 を学ぶためのサンプル0
* @date		2021/04/13
* @par		Copyright
  (c) 2019-2021 Bunya
**********************************************************************
*	@par	History
*			- 2019-06-23 Bunya
*				-# 新規作成
*			- 2021-04-13 Bunya
*				-# ミスや誤解を招く内容を訂正。
*
**********************************************************************
*/
// 大枠：定数、変数、グローバル

// pragma onceはインクルードガードといって多重にincludeを防ぐためのおまじないです。
// 現在、ほとんどのメジャーなコンパイラ(というか使えないのは大昔のものだけ)で使用できます。
// ただ、知らない人もいて場合によっては伝統的な#ifndef, #define, #endifを用いることもあります。
// が、そうじゃないならpragma onceを使えばいい
#pragma once

/************************** 定数 ***************************/
// 定数と言ったらマジックナンバーの置き換えが主なんじゃないかなぁと思いますが、
// C言語で定数と言えば#defineというプリプロセッサです。
// ↓だとLOOP_MAXってのをコンパイル前に片っ端から121に置換します
#define LOOP_MAX 121
// 注意としては、同じ名前のdefineがあった場合、後に出現するものが優先されます。
// エラーにはなりません。"同じ名前のがあるよ"っていう警告が出ることがありますが、
// 100%期待してはいけません
// defineで書く定数の名前は大文字＋_で記載するのが一般的かな。

// また、このdefineを使ってマクロ関数なるものを作ることができますが、一部を除いて
// 使わない方がいいです。自分で作るのもなるべく避けて下さい。なので書きません。
// 使うとしたらVSの_countofかoffSetof(Lv5では確実に使わない)とかですかねぇ・・・

/************************** 変数 ***************************/
// 他のプログラム言語でも同じみの値とかを入れれる奴です。標準型は下の方で説明します。
// 標準型の他に後で書くtypedefってものでWORD、BYTEなどの型が用意されていることが良くあります。

/************************** グローバル変数＆変数型 ***************************/
// C言語では関数の外に置かれる変数は全てグローバル変数で外部リンケージという扱いになります。
// 外部リンケージは、簡単に言って対象ファイルの外からも参照できるっていうものです。
// んで、まぁC言語ではグローバル変数は多少使わざるをえないので、書いときます。
//
// 普通は↓のようなものがどこかに用意されているはず。どういう意味かはSample0-Global.cに書いてるよ
#ifdef GLOBAL_DEFINE
#define GLOBAL
#define GLOBAL_VALUE(v) = (v)
#else
#define GLOBAL extern
#define GLOBAL_VALUE(v)
#endif

// ↓これがグローバル変数の一覧表となる。守られることは少ないが、グローバル変数は一つのファイルにまとめるべき。
// とりあえずボカァ g_とかglobalみたいに皆が触る変数ですよって明示する名前規則にしてますね。
// んでも、このプログラムでは他で使わないのとサンプルなので名前自体は酷いです

// 整数型
GLOBAL char	globalValue1 GLOBAL_VALUE(1);
										// 文字リテラルを1文字格納する以外はバイナリデータのバイトを扱う時かなぁ。。。
GLOBAL signed char globalValue2;		// 符号付きのchar
GLOBAL unsigned char globalValue3;		// 符号なしのchar
GLOBAL short globalValue4;				// short intの別名。符号付き
GLOBAL unsigned short globalValue5;		// 符号なしshort int
GLOBAL int globalValue6;				// 符号付き。CPUが一番扱いやすいサイズとされている
GLOBAL unsigned int globalValue7;		// 符号なしのint
GLOBAL long globalValue8;				// 符号付きのlong intの略
GLOBAL unsigned long globalValue9;		// 符号なしのlong int
GLOBAL long long globalValue10;			// 符号付きlong long intの略(C90にはないよー)
GLOBAL unsigned long long globalValue11;// 符号なしのlong long intの略(C90にはないよー)

// 実数型(小数扱う)
GLOBAL float              globalValue12;// 単精度。忘れ去ってください
GLOBAL double             globalValue13;// 倍精度。これだけ使えば良い
GLOBAL long double        globalValue14;// 忘れ去って下さい。

// 文字列 char* ポインタ書いてないので後で

// 論理型
GLOBAL _Bool globalValue15;
// これ、C99で追加されたもの。でも、多分業務じゃ使えない。もし、BOOLとかboolが既にdefineで
// 用意されていない職場なら、#include <stdbool.h>により bool, true, falseで扱える

// 型について追記
// char型はかなり厄介です。charと書いた場合、符号付きか符号なしかは実装依存です。
// VSだとcharは符号付きだったと思います。
// で、このchar型ってビット演算とかで多用されるんですが符号なし型に入れるかキャストってのをしないと
// 符号付きのため期待した結果にならないことがあります。
//
// それと同じでchar 1byte, short 2byte, int 4byteって考えてる人がいますが、
// 実際の規格ではここからここまで表現できなければいけないと書いてるだけです。
// んでもまぁ、Windowsでしか触らないだろうから、
// char 1byte, short 2byte, int 4byteでいんじゃないかなぁと。
// longは勘違いするかもしれませんが4byteです。Windowsでは64bitであろうとそうなんです。
// 8byte使う時はlong long一択です。
// あと、実数はlong doubleは忘れ去るとして、floatも意味あって使える人はこんな話を読んでないので、
// doubleだけ覚えとけばOK。
// 蛇足) 多分現場ではサイズに合わせて型を宣言するように言われるでしょうから、本当に蛇足なんですけど、
//      現代なら余程のことがない限り整数にはint or unsigned intだけ使うのが幸せになると思います。
//      型変換とかx86の制限とかメモリたくさんetcを考えると
//
// あ・・・C言語でユニコード扱うようなのをやる方は悲惨な方か、ある程度経験のある方なので
// このプログラムはユニコードを対象にしてません。それようの型とかあるにはあるのですが、
// VSの対応状況わりぃし、扱うの難しい。。。
