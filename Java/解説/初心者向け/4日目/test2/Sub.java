/**
 * Javaの勉強 4日目(enumとか)
 * 
 * @version 1.0.0
 * @author Bunya
 */

package test2;

// それでは大分遅くなりましたが、enumについて。
// JDK 1.5から使用可能になりました。
// enumは列挙型と言われますが、実態はクラスであり、不変オブジェクトです。
// 書式は、
// enum 列挙名 { 列挙子, 列挙子, ・・・列挙子, }です。最後のカンマはついてもつけなくても構いません。
enum Sex {
	男,
	女,
}
// ちなみに実態はクラスなのでメソッドのオーバーライドとかも可能です。
// また、同じくJDK 1.5で導入されたEnumというクラスを継承してるので、Enumが持っているメソッドも使えます。
enum Status {
	// このようにメソッドなどを書く場合、列挙子は先頭でないといけない。
	STATUS1(3),
	STATUS2(5),
	STATUS3(7);
	// そして最後にセミコロンが必須。

	private int value;

    /**
     * コンストラクタ
     * 
     * @param n 初期値
     */
	private Status(int n) {
		// enumのコンストラクタはprivateでなければいけない
		value = n;
	}

    /**
     * 自分の名前を返す
     * 
     * @return 自分の名前
     */
	@Override
	public String toString() {
		return "(" + super.name() + ")";
	}

    /**
     * 列挙子の値を得る
     * 
     * @return 値
     */
	public int getValue() {
		return value;
	}

}

// フラグの管理みたいにして使いたい場合は、EnumSetのご利用をおすすめ。

// ところでswitchといえば、良くネットではポリモーフィズムやStateパターンでswitchを消せる。
// 否、消すのがいいという記事を見かけますが。
// ・・・半分以上嘘です。
// 元々はリファクタリングとかいう本に書かれてた内容だった気がしますが、
// 第2版で内容が変わってますしね。
// 確か初版では、"スイッチ文は重複したコードを生み出す問題児です。"として全部ポリモーフィズムに置き換えろ的なノリでした。
// ところが、新装版では、"今後問題とするのは、重複したswitch文のみとします。switch/case、if/elseがさまざまな箇所に同じロジックであるのはやばい"
//
// どうです？大分ニュアンス変わってますよね？むしろ、初版の方は本当にプログラム開発したことあるんか？と思わせる内容です。
// これを馬鹿正直に信じて、それに盲目的に従った人たちがネットで配信してるだけです。と筆者思うある。
//
// あるサイトでは、この記述の変遷を以下のように記載してた。(おっとこれは著作権の侵害になるが、ご容赦を)
// " 初版が出版された約15年前は、ポリモーフィズムの考え方が一般的ではなかったそうです。
//   switch文しか使えないという考え方がコードの不吉な臭いであることを強調したかったので「スイッチ文」という名前にしたが、
//   switch文そのものが悪な訳ではないよ、と第2版では説明が変わっています。"
// 多分この本は2014年に発刊された奴だと思う(リファクタリングの第2版の方は2019年発刊だし言語もJavaからJavaScriptに変わってる)のですが、
// それから考えると1999年。うーん、ポリモーフィズムって十分に一般的になってたと思うけどなぁ。(世界では。日本は違うが)
// だって、デザインパターンの奴で有名なGoFの原著が発刊したのって1994年ですよ。日本では1999年だけど。
// ・・・あぁそっかそれと同じくらいリファクタリングの方も日本語化が遅れてた可能性はあるな。
// うん。これは分からないな。でも、いくら強調したかったからってミスリードも良いところのタイトルだろ。
//
// ・・・てか、switchやifが同じロジックで重複って普通に組んでて、そうそうなるかな？それ自体が不思議なのだけど。
// なによりポリモーフィズム使うってことはクラスたくさん作るわけじゃないですか。
// 1ファイル1クラス好きなJavaだとswitchのcaseに該当する適切なクラス名(=ファイル名)決めるだけでも大変な話だと思うのですが、どうですかね。
// ポリモーフィズムの方がcaseを追加するのが簡単というが、日本でまだ蔓延ってるかもしれない行数で値段が変わる場合とかは、クラス追加した方が
// まずいケースって多々あるような？
// まぁ、最初にswitchにするかどうかを検討するってのは大事かもしれないですが、そもそも重複なんて滅多に起きないんだよなぁ。
// しかもそれが色々な箇所でって・・・それ、クラスとかメソッドの設計が正しく出来てないんじゃねぇかな。
