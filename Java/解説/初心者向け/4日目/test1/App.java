/**
 * Javaの勉強 4日目(例外)
 * 
 * @version 1.0.0
 * @author Bunya
 */

package test1;

/**
 * アプリ クラス
 * 
 */
public final class App {

    /**
     * Mainメソッド
     * 
     * @param args 起動時に与えられたコマンドの配列
     */
    public static void main(String[] args) {
        // メソッドの呼び出し
        first();
        second();

        // 画面に表示する
        System.out.println("正常終了");
    }

    /**
     * 最初のメソッド(説明用)
     * 
     */
    static void first() {
    	var e = new exceptionExperiment1();

    	// 例外を捕捉するには、以下のように例外を投げるメソッドをtryで囲み、
    	// catchに捕捉する例外を書き(複数並べて書ける)、もし後始末が必要なことがあったら
        // finallyという{}ブロックに記述する。
        // finallyは何が何でも実行されますが、System.exitで落としてしまうとさすがに実行されません。
    	try {
    		e.occurException();
    	} catch (UnsupportedOperationException ex) {
    		System.out.println("例外発生!");
    		ex.printStackTrace();
    		// System.exit(1);

    		// JDK 1.7からは例外の変数を書き換えない場合に限り、
    		// 安全な再スローが出来るようになった。
    		// throw ex;こんな感じで。
    	} finally {
    	}

    	// 筆者はJavaでの例外の運用はさっぱりわからないのだが、
    	// 例えばC#では例外は基本的にcatchするなということになってる。
    	// テストとかを綿密にやって簡単なバグは全て潰し、本当に例外的な事象が起きたら、悪あがきせず落とせみたいなノリらしい。
    	// ・・・批判を覚悟で言えば、そんなの出来るのは業務アプリとかWebアプリみたいな、ぬるい環境での話だけだろと思う。
    	// 例えば、テストが十分に出来ないってのは周知の事実なわけで、そのような状況下で配列の範囲外例外とかが発生した場合にすぐ終了させる
    	// などとやっていたら、機械なんてどうなるんですかね？
    	// 例えばブレーキが効かない状態の時に再起動するまでブレーキが効かないでいんでしょうか？
    	// 業務アプリなんて再起動すればいいだけだし、Webアプリだってページにアクセスできないとかで、後日偉い人が頭さげる程度ですむでしょう。
    	// 命とか安全がかかってるソフトでそんな簡単に終わればいいとか、何言ってんだこいつ？の世界です。
    	//
    	// まぁ組み込みではウォッチドックとかそういう仕組みで、一定時間反応がなくなったら0番地からリスタートとかやりますが、
    	// それはその方がまだ助かる可能性があるからの話です。例外が出るまでのんきに待ってるなんてしたら、車が衝突して事故が起きたりします。
    	// また、例外って↑の書き方をみれば分かる通り、同期的な処理でしか捕捉できないんですよね。
    	// 並列で処理してた場合、どうにかしてメインのスレッドに発生した例外を集約させるみたいな機構を作らないと話になりません。
    	// なので、例外ってのはどこまで使えるのか？どう使うのか？が、悩ましい話です。
    }

    /**
     * 2つ目のメソッド(説明用)
     * 
     */
    static void second() {
    	try {
    		var e = new exceptionExperiment2();
    		e.occurException();
    	} catch(Exception ex) {
    		System.out.println("例外発生!");
    		ex.printStackTrace();
    	}

    	// Exceptionは検査例外なので、もしcatchしてない場合はコンパイルができません。
    	// ・・・・ですが、
    	// この検査例外は、残念ながら時代遅れの遺物です。
    	// JavaばっかりとかJavaが長い人は抵抗するでしょうが、他のメジャー言語およびJVMを使用する他の言語、
    	// 後継？となりつつあるKotlinでも不採用の仕組みです。
    	// 確かJava開発者のジェームズ・ゴスリンも問題点について認めていた記事があった記憶がありますが、今探すと見つかりませんでした。
    	// こういった事実があっても、"いや検査例外は素晴らしい。だから他の言語にこれがないのは欠陥だ。"と主張するのがJavaコミュニティの問題点です。
    	// 確かに悪いことだけではないと思うのですが、他の多数ある言語で採用されていない以上、Java以外を用いる開発でそんなこと言っても仕方がないでしょう。
    	// ほら、よく言う老害みたいな話です。
    	// "ワシらがなじんでる文法がないのが、おかしんじゃ"みたいな。
    	//
    	// 何より最大の問題は検査例外、非検査例外について深く理解していないため、全てcatch Exceptionで握りつぶしてしまうのに帰結してしまいがちなことです。
    	// 私の知ってる他の言語やってましたな年配(年配だけじゃないけど)の方などは、コンパイルエラーをつぶすためにcatch Exceptionをとりあえず書くとか普通にやりそうです。
    	// ※ 残念ながら、日本のIT技術者とかはリーマン化してるので、会社を出た瞬間からパソコンに触らない、仕事のことは勉強しない、教えてもらってないことは全てわからない。
    	//    が今までまかり通ってました。これから先は多分無理でしょうね。
    	//    なぜなら、そのようなレベルの方はAIのプロンプト操作で出てきたソースについて深く考察できないので、アルバイトのような存在になってしまうと思うからです。
    	//    AIが普及すると、レベル高い人が今まで以上に稼げるようになって、逆にレベル低い人は低賃金になるだけじゃないかなと思うのです。
    	//
    	// ちなみに、JVMにとっては検査例外は必要なことではなく、javacが親切にコンパイルエラーにしてくれているだけだそうです。
    	// だから他のJVM言語は検査例外を採用してなくても支障がないんですね。
    	// まぁ検査例外は壮大な実験だった。チャンチャンです。
    	// とはいえ、今でもJavaでは必要なんだから、仕方ないですね。
    	// ・・・本当のことを言うと検査例外が悪いというより、例外という機構そのものが過渡期のものだったのではないだろうか？という疑念を持ってますがね。
    }

}
